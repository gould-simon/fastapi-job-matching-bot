---
description: General project rules
globs: 
---
# General Project Rules

## 1Ô∏è‚É£ Project Overview
This is a **FastAPI-powered AI job-matching bot** that integrates with **Telegram** and uses **PostgreSQL (hosted on Render)** as its database.  
- The bot allows users to chat, upload CVs, receive job matches, and set job preferences.  
- The system must be **asynchronous** for handling Telegram requests efficiently.  
- The backend is deployed on **Fly.io**, while the database is on **Render**.  

üìå **Refer to** `Product_Requirements_Document.md` for architecture, features, and business logic.

---

## 2Ô∏è‚É£ FastAPI Best Practices
- Use **`async def`** for all database queries, API calls, and I/O-bound tasks.
- **Pydantic models** should be used for request validation and response schemas.
- Use **dependency injection** for database sessions and external services.
- Follow **RESTful API design principles** with clear, documented endpoints.

### **API Design Guidelines**
- Each endpoint must specify a **response model** (`response_model=YourSchema`).
- Use **`Depends()`** for injecting database sessions.
- Implement **rate-limiting** and **input validation** to prevent spam or abuse.

üìå **Refer to** [FastAPI Docs](https://fastapi.tiangolo.com/) for best practices.

---

## 3Ô∏è‚É£ Database & Models (PostgreSQL)
- The bot interacts with **the existing job database from accountingfirmjobs.com**.
- A `users` table will be created to track Telegram users and their preferences.
- Use **SQLAlchemy 2.0** with **asyncpg** for database interactions.
- Ensure **indexed queries** for fast job lookups.

üìå **Refer to** `Product_Requirements_Document.md` for the exact schema design.

---

## 4Ô∏è‚É£ Telegram Bot Integration
- The bot must use **python-telegram-bot** for managing conversations.
- User **messages and interactions should be stored in the database**.
- **Error handling** must prevent bot crashes due to invalid user inputs.
- Implement **state management** for tracking user progress in job searches.

üìå **Refer to** `Product_Requirements_Document.md` for full bot functionality.

---

## 5Ô∏è‚É£ Security & Authentication
- Use **.env files** for API keys and sensitive credentials.
- Do not commit `.env` files‚Äîuse `.gitignore` to exclude them.
- Validate **all** incoming user data to prevent **SQL injection & bot abuse**.
- Implement **logging and monitoring** for debugging Telegram bot interactions.

---

## 6Ô∏è‚É£ Deployment & Performance Considerations
- Deploy the FastAPI backend to **Fly.io**.
- Use **async database queries** to prevent blocking operations.
- Optimize for **scalability**:
  - Use **connection pooling** for PostgreSQL.
  - Cache **frequently accessed** job queries using **Redis (future scope)**.
- Ensure the **Telegram bot can handle concurrent users efficiently**.

---

## 7Ô∏è‚É£ AI Matching & Data Enrichment
- The bot should collect **user preferences dynamically** over time.
- Use **OpenAI embeddings** for CV parsing and job matching (future scope).
- Store **user career history and job preferences** for improving job recommendations.

üìå **Refer to** `Product_Requirements_Document.md` for AI-matching details.

---

## 8Ô∏è‚É£ Logging & Monitoring Standards
- Use structured logging with proper levels (DEBUG, INFO, ERROR)
- Implement database logging for critical operations
- Store logs in SQLite for the admin dashboard
- Include proper error context in all log messages

## 9Ô∏è‚É£ Database Connection Management
- Use connection pooling for PostgreSQL connections
- Implement proper connection cleanup
- Handle connection timeouts and keepalives
- Follow the retry pattern for failed connections

## üîü Admin Dashboard Guidelines
- Build with Streamlit for real-time monitoring
- Include user activity metrics
- Implement log viewing and filtering
- Enable data export functionality

---

## üîπ Summary of Core Principles
‚úÖ Follow **FastAPI best practices** for API development.  
‚úÖ Maintain **async** workflows to handle bot interactions efficiently.  
‚úÖ Use **PostgreSQL** as the central job-matching database.  
‚úÖ Ensure **Telegram bot reliability** by handling errors gracefully.  
‚úÖ Use **environment variables** for security & deployment.  
‚úÖ Reference **Product_Requirements_Document.md** for all major decisions.  

---

### ‚úÖ **Final Notes**
This rules file should guide **Cursor's AI** when providing suggestions for **FastAPI, database design, and Telegram bot development**.  
