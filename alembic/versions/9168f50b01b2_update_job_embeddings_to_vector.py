"""update_job_embeddings_to_vector

Revision ID: 9168f50b01b2
Revises: 2024_02_06_01
Create Date: 2025-02-06 00:55:01.783187

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import pgvector.sqlalchemy

# revision identifiers, used by Alembic.
revision: str = '9168f50b01b2'
down_revision: Union[str, None] = '2024_02_06_01'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # First, create the vector extension if it doesn't exist
    op.execute('CREATE EXTENSION IF NOT EXISTS vector')
    
    # Update job_embeddings table
    op.execute('ALTER TABLE job_embeddings ALTER COLUMN embedding TYPE vector(1536) USING embedding::vector(1536)')
    op.execute('ALTER TABLE job_embeddings ALTER COLUMN embedding_vector TYPE vector(1536) USING embedding_vector::vector(1536)')
    
    op.alter_column('job_embeddings', 'last_updated',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    
    # Drop and recreate foreign key constraints and indexes
    op.drop_index('idx_job_embeddings_job_id', table_name='job_embeddings')
    op.drop_constraint('job_embeddings_job_id_fkey', 'job_embeddings', type_='foreignkey')
    op.create_foreign_key(None, 'job_embeddings', 'JobsApp_job', ['job_id'], ['id'])
    
    # Update job_matches table
    op.add_column('job_matches', sa.Column('telegram_id', sa.BigInteger(), nullable=False))
    op.add_column('job_matches', sa.Column('similarity_score', sa.Float(), nullable=False))
    op.alter_column('job_matches', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.drop_index('idx_job_matches_job_id', table_name='job_matches')
    op.drop_index('idx_job_matches_user_id', table_name='job_matches')
    op.create_index(op.f('ix_job_matches_job_id'), 'job_matches', ['job_id'], unique=False)
    op.create_index(op.f('ix_job_matches_telegram_id'), 'job_matches', ['telegram_id'], unique=False)
    op.drop_constraint('job_matches_user_id_fkey', 'job_matches', type_='foreignkey')
    op.drop_constraint('job_matches_job_id_fkey', 'job_matches', type_='foreignkey')
    op.create_foreign_key(None, 'job_matches', 'JobsApp_job', ['job_id'], ['id'])
    op.create_foreign_key(None, 'job_matches', 'users', ['telegram_id'], ['telegram_id'])
    op.drop_column('job_matches', 'user_id')
    op.drop_column('job_matches', 'score')
    
    # Update user_conversations table
    op.add_column('user_conversations', sa.Column('telegram_id', sa.BigInteger(), nullable=False))
    op.alter_column('user_conversations', 'message',
               existing_type=sa.VARCHAR(),
               type_=sa.Text(),
               existing_nullable=False)
    op.alter_column('user_conversations', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.create_index(op.f('ix_user_conversations_telegram_id'), 'user_conversations', ['telegram_id'], unique=False)
    op.drop_constraint('user_conversations_user_id_fkey', 'user_conversations', type_='foreignkey')
    op.create_foreign_key(None, 'user_conversations', 'users', ['telegram_id'], ['telegram_id'])
    op.drop_column('user_conversations', 'user_id')
    
    # Update user_searches table
    op.add_column('user_searches', sa.Column('telegram_id', sa.BigInteger(), nullable=False))
    op.add_column('user_searches', sa.Column('structured_preferences', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.alter_column('user_searches', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.drop_index('idx_user_searches_user_id', table_name='user_searches')
    op.drop_constraint('user_searches_user_id_fkey', 'user_searches', type_='foreignkey')
    op.create_foreign_key(None, 'user_searches', 'users', ['telegram_id'], ['telegram_id'])
    op.drop_column('user_searches', 'user_id')
    
    # Update users table - handle JSONB conversion with explicit USING clause
    op.execute('ALTER TABLE users ALTER COLUMN cv_embedding TYPE jsonb USING cv_embedding::text::jsonb')
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('users', 'last_active',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.drop_index('idx_users_telegram_id', table_name='users')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index('idx_users_telegram_id', 'users', ['telegram_id'], unique=False)
    op.alter_column('users', 'last_active',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.execute('ALTER TABLE users ALTER COLUMN cv_embedding TYPE double precision[] USING cv_embedding::text::double precision[]')
    
    op.add_column('user_searches', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'user_searches', type_='foreignkey')
    op.create_foreign_key('user_searches_user_id_fkey', 'user_searches', 'users', ['user_id'], ['id'])
    op.create_index('idx_user_searches_user_id', 'user_searches', ['user_id'], unique=False)
    op.alter_column('user_searches', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.drop_column('user_searches', 'structured_preferences')
    op.drop_column('user_searches', 'telegram_id')
    
    op.add_column('user_conversations', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'user_conversations', type_='foreignkey')
    op.create_foreign_key('user_conversations_user_id_fkey', 'user_conversations', 'users', ['user_id'], ['id'])
    op.drop_index(op.f('ix_user_conversations_telegram_id'), table_name='user_conversations')
    op.alter_column('user_conversations', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('user_conversations', 'message',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.drop_column('user_conversations', 'telegram_id')
    
    op.add_column('job_matches', sa.Column('score', sa.FLOAT(), autoincrement=False, nullable=True))
    op.add_column('job_matches', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'job_matches', type_='foreignkey')
    op.drop_constraint(None, 'job_matches', type_='foreignkey')
    op.create_foreign_key('job_matches_job_id_fkey', 'job_matches', 'JobsApp_job', ['job_id'], ['id'])
    op.create_foreign_key('job_matches_user_id_fkey', 'job_matches', 'users', ['user_id'], ['id'])
    op.drop_index(op.f('ix_job_matches_telegram_id'), table_name='job_matches')
    op.drop_index(op.f('ix_job_matches_job_id'), table_name='job_matches')
    op.create_index('idx_job_matches_user_id', 'job_matches', ['user_id'], unique=False)
    op.create_index('idx_job_matches_job_id', 'job_matches', ['job_id'], unique=False)
    op.alter_column('job_matches', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.drop_column('job_matches', 'similarity_score')
    op.drop_column('job_matches', 'telegram_id')
    
    op.drop_constraint(None, 'job_embeddings', type_='foreignkey')
    op.create_foreign_key('job_embeddings_job_id_fkey', 'job_embeddings', 'JobsApp_job', ['job_id'], ['id'])
    op.create_index('idx_job_embeddings_job_id', 'job_embeddings', ['job_id'], unique=False)
    op.alter_column('job_embeddings', 'last_updated',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.execute('ALTER TABLE job_embeddings ALTER COLUMN embedding_vector TYPE double precision[] USING embedding_vector::text::double precision[]')
    op.execute('ALTER TABLE job_embeddings ALTER COLUMN embedding TYPE double precision[] USING embedding::text::double precision[]')
    # ### end Alembic commands ###
